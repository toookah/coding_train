# 最大嵌套括号深度
# 题目描述：
# 现有一字符串仅由 ‘(’， ‘)’， ‘{’， ‘}’， ‘[’， ']'六种括号组成。 若字符串满足以下条件之一，则为无效字符串：

# ①任一类型的左右括号数量不相等；
# ②存在未按正确顺序（先左后右）闭合的括号。
# 输出括号的最大嵌套深度，若字符串无效则输出 0。 0≤字符串长度≤100000

# 输入描述:
# 一个只包括 ‘(’， ‘)’， ‘{’， ‘}’， ‘[’， ']'的字符串

# 输出描述：
# 一个整数，最大的括号深度

# 示例 1：

# 输入
# []
# 1
# 输出
# 1
# 1
# 说明
# 有效字符串，最大嵌套深度为1

# 示例 2：

# 输入
# ([]{()})
# 1
# 输出
# 3
# 1
# 说明
# 有效字符串，最大嵌套深度为3

# 示例 3：

# 输入
# (]
# 1
# 输出
# 0
# 1
# 说明
# 无效字符串，有两种类型的左右括号数量不相等

# 示例 4：

# 输入
# ([)]
# 1
# 输出
# 0
# 1
# 说明
# 无效字符串，存在未按正确顺序闭合的括号
# ————————————————
# 版权声明：本文为CSDN博主「小朱小朱绝不服输」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
# 原文链接：https://blog.csdn.net/weixin_44052055/article/details/123946643

s="[]"
map={'(':')','[':']','{':'}'}
stack=[]
midD=0
ret=0
for i in range(0,len(s)):
    if s[i] == "(" or s[i] == "{" or s[i] == "[":
        stack.append(s[i])
        ret=max(ret,len(stack))
    elif s[i] == ")" or s[i] == "}" or s[i] == "]":
        tmp=stack.pop()
        if s[i] != map[tmp]:
            ret=0
            break
print(ret)